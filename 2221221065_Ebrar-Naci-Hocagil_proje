# Gerekli kütüphaneleri içe aktar
import math
import pandas as pd
import matplotlib.pyplot as plt
from scipy.stats import wilcoxon

# Veri setini oku ve eksik değerleri çıkar
dataset = pd.read_csv("top-rated-coffee-clean.csv")
scores = dataset["total_score"].dropna().tolist()

# Gözlem sayısı
n = len(scores)

# 1) Ortalama (mean) = sum(x_i) / n
ortalama = sum(scores) / n

# 2) Medyan (median): sıralı veri ortancası
sirali = sorted(scores)
if n % 2 == 1:
    medyan = sirali[n//2]
else:
    medyan = (sirali[n//2 - 1] + sirali[n//2]) / 2

# 3) Varyans (s^2) = sum((x_i - mean)^2) / (n - 1)
varyans = sum((x - ortalama)**2 for x in scores) / (n - 1)

# 4) Standart sapma (s) = sqrt(varyans)
std = math.sqrt(varyans)

# 5) Standart hata (SE) = s / sqrt(n)
stdhata = std / math.sqrt(n)

# Temel değerleri yazdır
print("Ortalama:", round(ortalama, 4))
print("Medyan:",   round(medyan,   4))
print("Standart Sapma:", round(std, 4))
print("Varyans:",        round(varyans, 4))
print("Standart Hata:",  round(stdhata, 4))

# Histogram grafiği 
plt.hist(scores, bins=20, color="lightgreen", edgecolor="black")
plt.title("Histogram")
plt.xlabel("Puan")
plt.ylabel("Frekans")
plt.show()

# Boxplot grafiği 
plt.boxplot(scores, vert=False)
plt.title("Boxplot")
plt.xlabel("Puan")
plt.show()

# Ortalama için %95 güven aralığı 
dfree = n - 1
z = 1.96 
# Cornish–Fisher ile yaklaşık t_crit
t_crit = z + (z**3 + z) / (4 * dfree)
alt_sinir = ortalama - t_crit * stdhata
ust_sinir = ortalama + t_crit * stdhata
print("Ortalama için %95 güven aralığı:", 
      "({:.2f}, {:.2f})".format(alt_sinir, ust_sinir))

# Varyans için %95 güven aralığı (Wilson–Hilferty yaklaşık)
z_upper = -1.96  
z_lower =  1.96  
chi2_alt = dfree * (1 - 2/(9*dfree) + z_upper * math.sqrt(2/(9*dfree)))**3
chi2_ust = dfree * (1 - 2/(9*dfree) + z_lower * math.sqrt(2/(9*dfree)))**3
var_lower = dfree * varyans / chi2_ust
var_upper = dfree * varyans / chi2_alt
print(f"Varyans için %95 güven aralığı (yaklaşık): ({var_lower:.4f}, {var_upper:.4f})")

# Aykırı değerleri bul (IQR yöntemi)
q1 = pd.Series(sirali).quantile(0.25)
q3 = pd.Series(sirali).quantile(0.75)
iqr = q3 - q1
alt_s = q1 - 1.5 * iqr
ust_s = q3 + 1.5 * iqr
aykirilar = [x for x in scores if x < alt_s or x > ust_s]
print("Aykırı değer sayısı:", len(aykirilar))

# Hipotez testi (ortalama 94 mü değil mi)

hypothesized_median = 94
differences = [x - hypothesized_median for x in scores]
stat, p_value = wilcoxon(differences)
print(f"Test istatistiği {stat}")
print(f"P-değeri {p_value}")
if p_value < 0.05:
    print("Kabul edildi")
else:
    print("Reddedildi")


# Örneklem büyüklüğü (±0.1 hata ve %90 güven)
z90 = 1.645
n_gerekli = (z90 * std / 0.1) ** 2
print("Gerekli örneklem büyüklüğü:", round(n_gerekli))




